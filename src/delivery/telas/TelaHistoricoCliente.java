/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package delivery.telas;

import delivery.basica.Cliente;
import delivery.basica.Pedido;
import delivery.repositorio.DAOPedido;
import delivery.util.CurrencyTableCellRenderer;
import delivery.util.DAOException;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriel Augusto
 */
public class TelaHistoricoCliente extends javax.swing.JDialog {

   Pedido pedido;
   DAOPedido dao;
   DefaultTableModel tbConfirmados,tbCancelados,tbProdutosPed;
    
    /**
     * CONSTRUTOR UTILIZADO
     * @param cliente 
     */
    public TelaHistoricoCliente(Cliente cliente){
        initComponents();
        pedido = new Pedido();
        dao = new DAOPedido();
        pedido.setCliente(cliente);
        TelaPedidosConfirmados();
        TelaPedidosCancelados();
        
    }
    
    
    private void TelaPedidosConfirmados(){
       tbConfirmados = new DefaultTableModel();
       tbPedidosConfirmados.setBackground(Color.GREEN);
       tbPedidosConfirmados.getColumnModel().getColumn(2).setCellRenderer(new CurrencyTableCellRenderer());
       tbPedidosConfirmados.getColumnModel().getColumn(3).setCellRenderer(new CurrencyTableCellRenderer());
       tbConfirmados = (DefaultTableModel) tbPedidosConfirmados.getModel();
       
       try {
           ArrayList<Pedido> retorno;
           if(pedido != null){
           this.pedido.setPedStatus("Confirmado");

          retorno = dao.HistoricoCliente(pedido);
          
          if(tbConfirmados.getRowCount() > 0){
              tbConfirmados.setRowCount(0);   
          }
         
          
          for (Pedido p : retorno) { 
            
            tbConfirmados.addRow(new Object[]{
                                                p.getCodPedido(),
                                                p.getDtPedido(),
                                                p.getValorFrete(),
                                                p.getValorTotal(),
                                                p.getPgto()
            });
        } 
          
          
          
          }
       } catch (DAOException | SQLException ex) {
           
       }
        
    }
    
    private void TelaPedidosCancelados(){
        
       tbCancelados = new DefaultTableModel();
       tbPedidosCancelados.setBackground(Color.red);
       tbPedidosCancelados.getColumnModel().getColumn(2).setCellRenderer(new CurrencyTableCellRenderer());
       tbPedidosCancelados.getColumnModel().getColumn(3).setCellRenderer(new CurrencyTableCellRenderer());
       tbCancelados = (DefaultTableModel) tbPedidosCancelados.getModel();
       
       if(tbCancelados.getRowCount() > 0){
              tbCancelados.setRowCount(0);  
          }

       try {
           ArrayList<Pedido> retorno;
           if(pedido != null){
           this.pedido.setPedStatus("Cancelado");

          retorno = dao.HistoricoCliente(pedido);
  
          for (Pedido pc : retorno) { 
            
            tbCancelados.addRow(new Object[]{
                                                pc.getCodPedido(),
                                                pc.getDtPedido(),
                                                pc.getValorFrete(),
                                                pc.getValorTotal(),
                                                pc.getPgto()
            });
        } 
          
          
          
          
          
          }
       } catch (DAOException | SQLException ex) {
           
       }
       
       
       
    }
    
    private void TelaProdutosPedidos(){
        
        tbProdutosPed = new DefaultTableModel();
       tbProdutosPedidos.setBackground(Color.YELLOW);
       tbProdutosPed = (DefaultTableModel) tbProdutosPedidos.getModel();
        
        if(tbProdutosPed.getRowCount() > 0){
              tbProdutosPed.setRowCount(0);     
          }
        
        
    }
    
    
    /**
     * Creates new form TelaDetalheCliente
     */
    public TelaHistoricoCliente(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        menuPedidosConfirmados = new javax.swing.JScrollPane();
        tbPedidosConfirmados = new javax.swing.JTable();
        menuPedidosCancelados = new javax.swing.JScrollPane();
        tbPedidosCancelados = new javax.swing.JTable();
        menuProdutosPedidos = new javax.swing.JScrollPane();
        tbProdutosPedidos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Histórico do Cliente");

        tbPedidosConfirmados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Data do Pedido", "Valor do Frete", "Valor Total", "Pagamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuPedidosConfirmados.setViewportView(tbPedidosConfirmados);
        if (tbPedidosConfirmados.getColumnModel().getColumnCount() > 0) {
            tbPedidosConfirmados.getColumnModel().getColumn(0).setMinWidth(50);
            tbPedidosConfirmados.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbPedidosConfirmados.getColumnModel().getColumn(0).setMaxWidth(50);
            tbPedidosConfirmados.getColumnModel().getColumn(1).setMinWidth(135);
            tbPedidosConfirmados.getColumnModel().getColumn(1).setPreferredWidth(135);
            tbPedidosConfirmados.getColumnModel().getColumn(1).setMaxWidth(135);
            tbPedidosConfirmados.getColumnModel().getColumn(2).setMinWidth(90);
            tbPedidosConfirmados.getColumnModel().getColumn(2).setPreferredWidth(90);
            tbPedidosConfirmados.getColumnModel().getColumn(2).setMaxWidth(90);
            tbPedidosConfirmados.getColumnModel().getColumn(3).setMinWidth(90);
            tbPedidosConfirmados.getColumnModel().getColumn(3).setPreferredWidth(90);
            tbPedidosConfirmados.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        jTabbedPane1.addTab("Pedidos Confirmados", menuPedidosConfirmados);

        tbPedidosCancelados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Data do Pedido", "Valor do Frete", "Valor Total", "Pagamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuPedidosCancelados.setViewportView(tbPedidosCancelados);
        if (tbPedidosCancelados.getColumnModel().getColumnCount() > 0) {
            tbPedidosCancelados.getColumnModel().getColumn(0).setMinWidth(50);
            tbPedidosCancelados.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbPedidosCancelados.getColumnModel().getColumn(0).setMaxWidth(50);
            tbPedidosCancelados.getColumnModel().getColumn(1).setMinWidth(135);
            tbPedidosCancelados.getColumnModel().getColumn(1).setPreferredWidth(135);
            tbPedidosCancelados.getColumnModel().getColumn(1).setMaxWidth(135);
            tbPedidosCancelados.getColumnModel().getColumn(2).setMinWidth(90);
            tbPedidosCancelados.getColumnModel().getColumn(2).setPreferredWidth(90);
            tbPedidosCancelados.getColumnModel().getColumn(2).setMaxWidth(90);
            tbPedidosCancelados.getColumnModel().getColumn(3).setMinWidth(90);
            tbPedidosCancelados.getColumnModel().getColumn(3).setPreferredWidth(90);
            tbPedidosCancelados.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        jTabbedPane1.addTab("Pedidos Cancelados", menuPedidosCancelados);

        tbProdutosPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        menuProdutosPedidos.setViewportView(tbProdutosPedidos);

        jTabbedPane1.addTab("Produtos Pedidos", menuProdutosPedidos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaHistoricoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaHistoricoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaHistoricoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaHistoricoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaHistoricoCliente dialog = new TelaHistoricoCliente(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane menuPedidosCancelados;
    private javax.swing.JScrollPane menuPedidosConfirmados;
    private javax.swing.JScrollPane menuProdutosPedidos;
    private javax.swing.JTable tbPedidosCancelados;
    private javax.swing.JTable tbPedidosConfirmados;
    private javax.swing.JTable tbProdutosPedidos;
    // End of variables declaration//GEN-END:variables
}
